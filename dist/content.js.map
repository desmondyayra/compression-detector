{"version":3,"file":"content.js","mappings":";;;;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://youtube-compression-detector/./src/content.js"],"sourcesContent":["console.log('YouTube Compression Detector: Content script loaded');\r\n\r\nfunction isYouTubeWatchPage() {\r\n  return window.location.hostname.includes('youtube.com') &&\r\n         window.location.pathname === '/watch';\r\n}\r\n\r\nfunction getVideoTitle() {\r\n  const possibleSelectors = [\r\n    'h1.title.style-scope.ytd-video-primary-info-renderer',\r\n    'h1.ytd-watch-metadata',\r\n    'h1.title',\r\n    'ytd-watch-metadata h1'\r\n  ];\r\n\r\n  for (const selector of possibleSelectors) {\r\n    const titleElement = document.querySelector(selector);\r\n    if (titleElement && titleElement.textContent.trim()) {\r\n      return titleElement.textContent.trim();\r\n    }\r\n  }\r\n\r\n  return 'Unknown YouTube Video';\r\n}\r\n\r\nfunction getVideoElement() {\r\n  return document.querySelector('video');\r\n}\r\n\r\nfunction isAdPlaying() {\r\n  const adContainer = document.querySelector('.video-ads.ytp-ad-module');\r\n  return adContainer && adContainer.children.length > 0;\r\n}\r\n\r\nfunction getVideoQuality(video) {\r\n  const width = video.videoWidth;\r\n  const height = video.videoHeight;\r\n\r\n  if (height >= 2160) return '4K';\r\n  if (height >= 1440) return '1440p';\r\n  if (height >= 1080) return '1080p';\r\n  if (height >= 720) return '720p';\r\n  if (height >= 480) return '480p';\r\n  if (height >= 360) return '360p';\r\n  return '240p';\r\n}\r\n\r\nfunction waitForNoAdThenMeasure() {\r\n  if (isAdPlaying()) {\r\n    // console.log('Ad detected, waiting for it to finish...');\r\n    const adCheck = setInterval(() => {\r\n      if (!isAdPlaying()) {\r\n        clearInterval(adCheck);\r\n        // console.log('Ad finished. Waiting 5 seconds before measurement...');\r\n        setTimeout(measureOnceAfterDelay, 5000);\r\n      } else {\r\n        // console.log('Ad still playing...');\r\n      }\r\n    }, 10000);\r\n  } else {\r\n    // console.log('No ad playing. Waiting 5 seconds before measurement...');\r\n    setTimeout(measureOnceAfterDelay, 5000);\r\n  }\r\n}\r\n\r\nfunction measureOnceAfterDelay() {\r\n  const video = getVideoElement();\r\n  if (!video) {\r\n    // console.log('No video element found.');\r\n    return;\r\n  }\r\n\r\n  if (video.paused) {\r\n    // console.log('Video is paused. Waiting to resume...');\r\n    const onPlay = () => {\r\n      video.removeEventListener('play', onPlay);\r\n      // console.log('Video resumed. Waiting 5 seconds before measuring...');\r\n      setTimeout(measureOnceAfterDelay, 5000);\r\n    };\r\n    video.addEventListener('play', onPlay);\r\n    return;\r\n  }\r\n\r\n  // console.log('Waiting 15 seconds to collect data...');\r\n  const startDecodedBytes = video.webkitVideoDecodedByteCount || 0;\r\n  const startStats = video.getVideoPlaybackQuality();\r\n  const startFrames = startStats ? startStats.totalVideoFrames - startStats.droppedVideoFrames : 0;\r\n  const startTime = video.currentTime;\r\n  const startTimestamp = Date.now();\r\n\r\n  setTimeout(() => {\r\n    const endDecodedBytes = video.webkitVideoDecodedByteCount || 0;\r\n    const endStats = video.getVideoPlaybackQuality();\r\n    const endFrames = endStats ? endStats.totalVideoFrames - endStats.droppedVideoFrames : 0;\r\n    const endTime = video.currentTime;\r\n    const endTimestamp = Date.now();\r\n\r\n    const framesDiff = endFrames - startFrames;\r\n    const bytesDiff = endDecodedBytes - startDecodedBytes;\r\n    const timeDiff = endTime - startTime;\r\n\r\n    if (timeDiff <= 0 || framesDiff <= 0 || bytesDiff <= 0) {\r\n      // console.log('Invalid measurement. Try again.');\r\n      return;\r\n    }\r\n\r\n    const fps = framesDiff / timeDiff;\r\n    const width = video.videoWidth;\r\n    const height = video.videoHeight;\r\n    const videoQuality = getVideoQuality(video);\r\n\r\n    const decodedBytesPerSec = fps * width * height * 1.5;\r\n    const receivedBytesPerSec = bytesDiff / timeDiff;\r\n    const decodedMbps = (decodedBytesPerSec * 8) / 1_000_000;\r\n    const receivedMbps = (receivedBytesPerSec * 8) / 1_000_000;\r\n    const compressionRatio = decodedMbps / receivedMbps;\r\n\r\n    const result = {\r\n      title: getVideoTitle(),\r\n      videoQuality,\r\n      resolution: { width, height },\r\n      fps,\r\n      receivedBitrateMbps: receivedMbps,\r\n      decodedBitrateMbps: decodedMbps,\r\n      compressionRatio,\r\n      measurementTime: timeDiff,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    // console.log('=== SINGLE MEASUREMENT RESULT (in Mbps) ===');\r\n    // console.log(result);\r\n    chrome.runtime.sendMessage({ action: 'compressionDataReady', ...result });\r\n  }, 15000);\r\n}\r\n\r\nfunction setupMeasurement() {\r\n  if (!isYouTubeWatchPage()) return;\r\n  const video = getVideoElement();\r\n  if (video) {\r\n    // console.log('Video element found, starting ad check and measurement.');\r\n    waitForNoAdThenMeasure();\r\n  } else {\r\n    // console.log('Waiting for video element...');\r\n    setTimeout(setupMeasurement, 2000);\r\n  }\r\n}\r\n\r\nsetupMeasurement();\r\n\r\nlet currentUrl = window.location.href;\r\nsetInterval(() => {\r\n  if (window.location.href !== currentUrl) {\r\n    currentUrl = window.location.href;\r\n    if (isYouTubeWatchPage()) {\r\n      // console.log('New video detected. Resetting measurement...');\r\n      setTimeout(setupMeasurement, 2000);\r\n    }\r\n  }\r\n}, 1000);\r\n"],"names":[],"sourceRoot":""}