{"version":3,"file":"background.js","mappings":";;;;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA","sources":["webpack://youtube-compression-detector/./src/background.js"],"sourcesContent":["// console.log('YouTube Compression Detector: Background script loaded');\r\n\r\n// Map from tabId to complete video data\r\nconst videoDataByTab = new Map();\r\n\r\n// Expected compression ratio ranges for different qualities\r\nconst COMPRESSION_THRESHOLDS = {\r\n  '240p': { min: 100, max: 300 },\r\n  '360p': { min: 150, max: 400 },\r\n  '480p': { min: 200, max: 500 },\r\n  '720p': { min: 300, max: 700 },\r\n  '1080p': { min: 400, max: 1000 },\r\n  '1440p': { min: 500, max: 1200 },\r\n  '4K': { min: 600, max: 1500 }\r\n};\r\n\r\nfunction getQualityFromResolution(width, height) {\r\n  if (height >= 2160) return '4K';\r\n  if (height >= 1440) return '1440p';\r\n  if (height >= 1080) return '1080p';\r\n  if (height >= 720) return '720p';\r\n  if (height >= 480) return '480p';\r\n  if (height >= 360) return '360p';\r\n  return '240p';\r\n}\r\n\r\nfunction isCompressionAbnormal(compressionRatio, quality) {\r\n  const threshold = COMPRESSION_THRESHOLDS[quality];\r\n  if (!threshold) return false;\r\n  \r\n  // Check if compression ratio is significantly higher than expected\r\n  // Using 50% above max threshold as \"abnormal\"\r\n  const abnormalThreshold = threshold.max * 1.5;\r\n  return compressionRatio > abnormalThreshold;\r\n}\r\n\r\nfunction createCompressionNotification(videoData) {\r\n  const { title, compressionRatio, videoQuality } = videoData;\r\n  const threshold = COMPRESSION_THRESHOLDS[videoQuality];\r\n  \r\n  if (!threshold) return;\r\n  \r\n  const expectedMax = threshold.max;\r\n  const percentageAbove = ((compressionRatio - expectedMax) / expectedMax * 100).toFixed(0);\r\n  \r\n  chrome.notifications.create({\r\n    type: 'basic',\r\n    iconUrl: 'icon48.png', // Make sure you have this icon file\r\n    title: 'High Compression Detected',\r\n    message: `\"${title}\" shows unusually high compression (${compressionRatio.toFixed(0)}:1 vs expected max ${expectedMax}:1 for ${videoQuality}). This may indicate over-compression or quality issues.`,\r\n    priority: 1\r\n  }, (notificationId) => {\r\n    if (chrome.runtime.lastError) {\r\n      // console.log('Notification error:', chrome.runtime.lastError);\r\n    } else {\r\n      // console.log(`Compression notification created: ${notificationId}`);\r\n    }\r\n  });\r\n}\r\n\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  // console.log('Message received in background:', message);\r\n\r\n  if (message.action === 'compressionDataReady') {\r\n    // console.log(\"Background received complete compression data\");\r\n    const tabId = sender.tab?.id;\r\n    \r\n    if (tabId !== undefined) {\r\n      // Store the complete video data\r\n      const completeVideoData = {\r\n        title: message.title,\r\n        url: message.url,\r\n        videoId: message.videoId,\r\n        videoQuality: message.videoQuality,\r\n        resolution: message.resolution,\r\n        frameRate: message.frameRate,\r\n        receivedBitrateBytes: message.receivedBitrateBytes,\r\n        decodedBitrateBytes: message.decodedBitrateBytes,\r\n        compressionRatio: message.compressionRatio,\r\n        validMeasurements: message.validMeasurements,\r\n        totalMeasurements: message.totalMeasurements,\r\n        measurements: message.measurements,\r\n        timestamp: message.timestamp\r\n      };\r\n      \r\n      videoDataByTab.set(tabId, completeVideoData);\r\n      // console.log(`Stored complete video data for tab ${tabId}:`, completeVideoData);\r\n      \r\n      // Log key metrics for easy debugging\r\n      // console.log(`Video: \"${completeVideoData.title}\"`);\r\n      // console.log(`Quality: ${completeVideoData.videoQuality} (${completeVideoData.resolution.width}x${completeVideoData.resolution.height})`);\r\n      // console.log(`Compression Ratio: ${completeVideoData.compressionRatio.toFixed(2)}:1`);\r\n      \r\n      // Check if compression ratio is abnormally high\r\n      const quality = completeVideoData.videoQuality || getQualityFromResolution(\r\n        completeVideoData.resolution.width, \r\n        completeVideoData.resolution.height\r\n      );\r\n      \r\n      if (isCompressionAbnormal(completeVideoData.compressionRatio, quality)) {\r\n        // console.log(`⚠️ ABNORMAL COMPRESSION DETECTED for ${quality}:`, completeVideoData.compressionRatio);\r\n        createCompressionNotification(completeVideoData);\r\n      }\r\n    }\r\n    \r\n    sendResponse({ status: 'received' });\r\n    return true;\r\n  }\r\n\r\n  if (message.action === 'getLatestVideoData') {\r\n    const tabId = message.tabId;\r\n    // console.log(`Background received request for video data from tab ${tabId}`);\r\n    \r\n    const videoData = videoDataByTab.get(tabId);\r\n    // console.log(\"Found video data:\", videoData);\r\n\r\n    if (!videoData) {\r\n      // console.log(\"No compression data found for this tab\");\r\n      sendResponse({ \r\n        status: 'not_found', \r\n        reason: 'No compression data available for this tab yet. Please wait for the measurement to complete.' \r\n      });\r\n    } else {\r\n      // console.log(\"Sending back complete video data:\", videoData);\r\n      sendResponse({ status: 'success', videoData: videoData });\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  // Legacy support - in case other parts still use the old action name\r\n  if (message.action === 'getLatestVideoInfo') {\r\n    const tabId = message.tabId;\r\n    // console.log(`Background received legacy request for tab ${tabId}`);\r\n    \r\n    const videoData = videoDataByTab.get(tabId);\r\n\r\n    if (!videoData) {\r\n      // console.log(\"No data found for this tab\");\r\n      sendResponse({ status: 'not_found', reason: 'No data available for this tab yet' });\r\n    } else {\r\n      // Convert to legacy format if needed\r\n      sendResponse({ status: 'success', video: videoData });\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  return true;\r\n});\r\n\r\n// Clean up data when tabs are closed to prevent memory leaks\r\nchrome.tabs.onRemoved.addListener((tabId) => {\r\n  if (videoDataByTab.has(tabId)) {\r\n    // console.log(`Cleaning up data for closed tab ${tabId}`);\r\n    videoDataByTab.delete(tabId);\r\n  }\r\n});\r\n\r\n// Debug function to help identify available video data\r\nchrome.tabs.onActivated.addListener((activeInfo) => {\r\n  // console.log(`Tab ${activeInfo.tabId} became active`);\r\n  // console.log(`Video data available for tabs: ${[...videoDataByTab.keys()].join(', ')}`);\r\n  \r\n  // Show summary of available data\r\n  const data = videoDataByTab.get(activeInfo.tabId);\r\n  if (data) {\r\n    console.log(`Active tab has data for: \"${data.title}\" (${data.videoQuality}) - Compression: ${data.compressionRatio.toFixed(2)}:1`);\r\n    \r\n    // Show compression status\r\n    const quality = data.videoQuality || getQualityFromResolution(data.resolution.width, data.resolution.height);\r\n    const threshold = COMPRESSION_THRESHOLDS[quality];\r\n    if (threshold) {\r\n      const status = data.compressionRatio > threshold.max * 1.5 ? '⚠️ HIGH' : '✅ Normal';\r\n      // console.log(`Compression status: ${status} (Expected: ${threshold.min}-${threshold.max}:1)`);\r\n    }\r\n  } else {\r\n  //   console.log('No video data available for active tab');\r\n   }\r\n});"],"names":[],"sourceRoot":""}